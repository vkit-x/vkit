#!/usr/bin/env bash
set -eo pipefail
trap "echo 'error: Script failed: see failed command above'" ERR


function pyproject_init {
    # Parse arguments.
    local arg git_remote pip_cache_folder python_version pip_install_tag

    while getopts 'r:c:p:t' arg ; do
        case "$arg" in
            r) git_remote=${OPTARG} ;;
            c) pip_cache_folder=${OPTARG} ;;
            p) python_version=${OPTARG} ;;
            t) pip_install_tag=${OPTARG} ;;
            *) return 1
        esac
    done

    echo "git_remote=${git_remote}"
    echo "pip_cache_folder=${pip_cache_folder}"
    echo "python_version=${python_version}"
    echo "pip_install_tag=${pip_install_tag}"

    # Initialize pyenv virtualenv.
    folder_name=$(basename "$(pwd)")

    if pyenv virtualenv-prefix "$folder_name" > /dev/null 2>&1 ; then
        echo "pyenv virtualenv name=${folder_name} exists, abort"
        return 1
    fi

    if [ -z "$python_version" ] ; then
        python_version=3.8.7
    fi
    echo "pyenv virtualenv name=${folder_name}, python_version=${python_version}"

    if ! pyenv virtualenv "$python_version" "$folder_name" ; then
        echo "Failed to create virtualenv ${folder_name}."
        return 1
    fi
    if ! pyenv local "$folder_name" ; then
        echo "Failed to create virtualenv ${folder_name}."
        return 1
    fi
    # Upgrade pip.
    pip install -U pip

    # Install dependencies.
    if ! pyproject-install-deps -c "$pip_cache_folder" -t "$pip_install_tag" ; then
        return 1
    fi

    if [ -n "$git_remote" ] ; then
        # Make sure cwd is not git initialized.
        if git rev-parse --git-dir > /dev/null 2>&1 ; then
            echo "Git initialized, abort."
            return 1
        fi
        # Initialize git.
        git init
        git add --all
        git commit -am 'init'
        # Push to the remote.
        git branch -M master
        git remote add origin "$git_remote"
        git push -u origin master
    fi
}


pyproject_init "$@"
